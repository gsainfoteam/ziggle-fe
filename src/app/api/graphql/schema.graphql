scalar Date

type Content {
  id: Int!
  deadline: Date
  content: String!
  lang: String!
  createdAt: Date!
}

type Reaction {
  emoji: String!
  count: Int!
  isReacted: Boolean!
}

type Author {
  name: String!
  uuid: String!
}

type Notice {
  id: Int!
  title: String!
  deadline: Date
  currentDeadline: Date
  langs: [String!]!
  content: String!
  author: Author!
  createdAt: Date!
  tags: [String!]!
  views: Int!
  imageUrls: [String!]!
  documentUrls: [String!]!
  isReminded: Boolean!
  reactions: [Reaction!]!
}

type DetailedNotice {
  id: Int!
  title: String!
  deadline: Date
  currentDeadline: Date
  langs: [String!]!
  content: String!
  author: Author!
  createdAt: Date!
  tags: [String!]!
  views: Int!
  imageUrls: [String!]!
  documentUrls: [String!]!
  isReminded: Boolean!
  reactions: [Reaction!]!
  additionalContents: [Content!]!
}

type Notices {
  list: [Notice!]!
  total: Int!
}

enum OrderBy {
  DEADLINE
  HOT
  RECENT
}

enum MineNotice {
  OWN
  REMINDERS
}

type Query {
  notices(offset: Int, limit: Int, search: String, tags: [String!], orderBy: OrderBy, my: MineNotice): Notices!
  notice(id: Int!): Notice
}

type Mutation {
  createNotice(
    title: String!
    body: String!
    deadline: Date
    images: [String!]
    tags: [Int!]
  ): DetailedNotice!
  attachInternationalNotice(
    title: String!
    body: String!
    deadline: Date
    noticeId: Int!
    contentId: Int!
    lang: String!
  ): DetailedNotice!
  createAdditionalNotice(
    title: String
    body: String!
    deadline: Date
    noticeId: Int!
  ): DetailedNotice!
  deleteNotice(id: Int!): Boolean!
  addReaction(noticeId: Int!, emoji: String!): DetailedNotice!
  deleteReaction(noticeId: Int!, emoji: String!): DetailedNotice!
}
